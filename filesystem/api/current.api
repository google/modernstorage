// Signature format: 4.0
package com.google.modernstorage.filesystem {

  public final class AndroidFileSystems {
    method public static java.nio.file.FileSystem getFileSystem(android.net.Uri uri);
    method public static java.nio.file.FileSystem getFileSystem(java.net.URI uri);
    method public static void initialize(android.content.Context context);
    method @kotlin.jvm.Throws(exceptionClasses=IllegalStateException::class) public static void installProvider(java.nio.file.spi.FileSystemProvider fileSystemProvider) throws java.lang.IllegalStateException;
    method public static java.nio.file.FileSystem newFileSystem(java.net.URI uri, java.util.Map<java.lang.String,java.lang.Object> env);
    field public static final com.google.modernstorage.filesystem.AndroidFileSystems INSTANCE;
  }

  public final class AndroidFileSystemsKt {
  }

  public final class AndroidPaths {
    method public static java.nio.file.Path get(android.net.Uri uri);
    method public static java.nio.file.Path get(java.net.URI uri);
    field public static final com.google.modernstorage.filesystem.AndroidPaths INSTANCE;
  }

  public class ContentFileSystem extends java.nio.file.FileSystem {
    method public void close();
    method public final String getAuthority();
    method public Iterable<java.nio.file.FileStore> getFileStores();
    method public java.nio.file.Path getPath(String? first, java.lang.String... more);
    method public java.nio.file.PathMatcher getPathMatcher(String? syntaxAndPattern);
    method public Iterable<java.nio.file.Path> getRootDirectories();
    method public String getSeparator();
    method public java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService();
    method public boolean isOpen();
    method public boolean isReadOnly();
    method public java.nio.file.WatchService newWatchService();
    method public com.google.modernstorage.filesystem.ContentFileSystemProvider provider();
    method public java.util.Set<java.lang.String> supportedFileAttributeViews();
    property public final String authority;
  }

  public final class ContentFileSystemProvider extends java.nio.file.spi.FileSystemProvider implements com.google.modernstorage.filesystem.PlatformContract {
    ctor public ContentFileSystemProvider(com.google.modernstorage.filesystem.PlatformContract contentContract);
    method public void checkAccess(java.nio.file.Path? path, java.nio.file.AccessMode?... modes);
    method public void copy(java.nio.file.Path? source, java.nio.file.Path? target, java.nio.file.CopyOption?... options);
    method public void createDirectory(java.nio.file.Path? dir, java.nio.file.attribute.FileAttribute<?>?... attrs);
    method public void delete(java.nio.file.Path? path);
    method public <V extends java.nio.file.attribute.FileAttributeView> V! getFileAttributeView(java.nio.file.Path? path, Class<V>? type, java.nio.file.LinkOption?... options);
    method public java.nio.file.FileStore getFileStore(java.nio.file.Path? path);
    method public java.nio.file.FileSystem getFileSystem(java.net.URI? uri);
    method public java.nio.file.Path getPath(java.net.URI? uri);
    method public String getScheme();
    method public boolean isHidden(java.nio.file.Path? path);
    method public boolean isSameFile(java.nio.file.Path? path, java.nio.file.Path? path2);
    method public void move(java.nio.file.Path? source, java.nio.file.Path? target, java.nio.file.CopyOption?... options);
    method public java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path? path, java.util.Set<? extends java.nio.file.OpenOption>? options, java.nio.file.attribute.FileAttribute<?>?... attrs);
    method public java.nio.file.DirectoryStream<java.nio.file.Path> newDirectoryStream(java.nio.file.Path? path, java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>? filter);
    method public java.nio.file.FileSystem newFileSystem(java.net.URI? uri, java.util.Map<java.lang.String,?>? env);
    method public <A extends java.nio.file.attribute.BasicFileAttributes> A! readAttributes(java.nio.file.Path? path, Class<A>? type, java.nio.file.LinkOption?... options);
    method public java.util.Map<java.lang.String,java.lang.Object> readAttributes(java.nio.file.Path? path, String? attributes, java.nio.file.LinkOption?... options);
    method public void setAttribute(java.nio.file.Path? path, String? attribute, Object? value, java.nio.file.LinkOption?... options);
    field public static final com.google.modernstorage.filesystem.ContentFileSystemProvider.Companion Companion;
  }

  public static final class ContentFileSystemProvider.Companion {
  }

  public final class ContentFileSystemProviderKt {
  }

  public final class DocumentBasicAttributes implements java.nio.file.attribute.BasicFileAttributes {
    method public java.nio.file.attribute.FileTime creationTime();
    method public Void? fileKey();
    method public String getMimeType();
    method public boolean isDirectory();
    method public boolean isOther();
    method public boolean isRegularFile();
    method public boolean isSymbolicLink();
    method public java.nio.file.attribute.FileTime lastAccessTime();
    method public java.nio.file.attribute.FileTime lastModifiedTime();
    method public long size();
    property public final String mimeType;
  }

  public final class DocumentPath implements java.nio.file.Path {
    ctor public DocumentPath(com.google.modernstorage.filesystem.ContentFileSystem fileSystem, String? treeId, java.lang.String... elements);
    method public int compareTo(java.nio.file.Path? other);
    method public boolean endsWith(java.nio.file.Path? other);
    method public boolean endsWith(String? other);
    method public String! getDocId();
    method public java.nio.file.Path? getFileName();
    method public com.google.modernstorage.filesystem.ContentFileSystem getFileSystem();
    method public java.nio.file.Path getName(int index);
    method public int getNameCount();
    method public java.nio.file.Path? getParent();
    method public java.util.List<java.lang.String> getPath();
    method public java.nio.file.Path? getRoot();
    method public String? getTreeId();
    method public boolean isAbsolute();
    method public java.util.Iterator<java.nio.file.Path> iterator();
    method public java.nio.file.Path normalize();
    method public java.nio.file.WatchKey register(java.nio.file.WatchService? watcher, java.nio.file.WatchEvent.Kind<?>![]? events, java.nio.file.WatchEvent.Modifier?... modifiers);
    method public java.nio.file.WatchKey register(java.nio.file.WatchService? watcher, java.nio.file.WatchEvent.Kind<?>?... events);
    method public java.nio.file.Path relativize(java.nio.file.Path? other);
    method public java.nio.file.Path resolve(java.nio.file.Path? other);
    method public java.nio.file.Path resolve(String? other);
    method public java.nio.file.Path resolveSibling(java.nio.file.Path? other);
    method public java.nio.file.Path resolveSibling(String? other);
    method public boolean startsWith(java.nio.file.Path? other);
    method public boolean startsWith(String? other);
    method public java.nio.file.Path subpath(int beginIndex, int endIndex);
    method public java.nio.file.Path toAbsolutePath();
    method public java.io.File toFile();
    method public java.nio.file.Path toRealPath(java.nio.file.LinkOption?... options);
    method public java.net.URI toUri();
    property public final String! docId;
    property public final java.util.List<java.lang.String> path;
    property public final String? treeId;
  }

  public interface PlatformContract {
    method public java.net.URI buildChildDocumentsUri(String authority, String parentDocumentId);
    method public java.net.URI buildChildDocumentsUriUsingTree(java.net.URI treeUri, String parentDocumentId);
    method public java.net.URI buildDocumentUri(String authority, String documentId);
    method public java.net.URI buildDocumentUriUsingTree(java.net.URI treeUri, String documentId);
    method public java.net.URI buildTreeDocumentUri(String authority, String documentId);
    method public void copyDocument(java.net.URI sourceDocumentUri, java.net.URI targetParentDocumentUri);
    method public void createDocument(java.net.URI parentDocumentUri, String mimeType, String displayName);
    method public void deleteDocument(java.net.URI documentUri);
    method public java.util.List<java.lang.String> findDocumentPath(com.google.modernstorage.filesystem.DocumentPath treePath);
    method public String? getDocumentId(java.net.URI documentUri);
    method public String? getTreeDocumentId(java.net.URI documentUri);
    method public boolean isDocumentUri(java.net.URI uri);
    method public boolean isTreeUri(java.net.URI uri);
    method public java.net.URI? moveDocument(java.net.URI sourceDocumentUri, java.net.URI sourceParentDocumentUri, java.net.URI targetParentDocumentUri);
    method public java.nio.file.DirectoryStream<java.nio.file.Path> newDirectoryStream(com.google.modernstorage.filesystem.DocumentPath path, java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>? filter);
    method public java.nio.channels.SeekableByteChannel openByteChannel(java.net.URI uri, String mode);
    method public java.net.URI prepareUri(java.net.URI incomingUri);
    method public <A extends java.nio.file.attribute.BasicFileAttributes> A! readAttributes(com.google.modernstorage.filesystem.DocumentPath path, Class<A>? type, java.nio.file.LinkOption?... options);
    method public boolean removeDocument(java.net.URI documentUri, java.net.URI parentDocumentUri);
    method public java.net.URI? renameDocument(java.net.URI documentUri, String displayName);
  }

  public final class UriExtKt {
    method public static java.net.URI toURI(android.net.Uri);
    method public static android.net.Uri toUri(java.net.URI);
  }

}

package com.google.modernstorage.filesystem.internal {

  public final class AndroidContentContract implements com.google.modernstorage.filesystem.PlatformContract {
    ctor public AndroidContentContract(android.content.Context context);
    method public java.net.URI buildChildDocumentsUri(String authority, String parentDocumentId);
    method public java.net.URI buildChildDocumentsUriUsingTree(java.net.URI treeUri, String parentDocumentId);
    method public java.net.URI buildDocumentUri(String authority, String documentId);
    method public java.net.URI buildDocumentUriUsingTree(java.net.URI treeUri, String documentId);
    method public java.net.URI buildTreeDocumentUri(String authority, String documentId);
    method public void copyDocument(java.net.URI sourceDocumentUri, java.net.URI targetParentDocumentUri);
    method public void createDocument(java.net.URI parentDocumentUri, String mimeType, String displayName);
    method public void deleteDocument(java.net.URI documentUri);
    method public java.util.List<java.lang.String> findDocumentPath(com.google.modernstorage.filesystem.DocumentPath treePath);
    method public String? getDocumentId(java.net.URI documentUri);
    method public String? getTreeDocumentId(java.net.URI documentUri);
    method public boolean isDocumentUri(java.net.URI uri);
    method public boolean isTreeUri(java.net.URI uri);
    method public java.net.URI? moveDocument(java.net.URI sourceDocumentUri, java.net.URI sourceParentDocumentUri, java.net.URI targetParentDocumentUri);
    method public java.nio.file.DirectoryStream<java.nio.file.Path> newDirectoryStream(com.google.modernstorage.filesystem.DocumentPath path, java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>? filter);
    method public java.nio.channels.SeekableByteChannel openByteChannel(java.net.URI uri, String mode);
    method public java.net.URI prepareUri(java.net.URI incomingUri);
    method public <A extends java.nio.file.attribute.BasicFileAttributes> A! readAttributes(com.google.modernstorage.filesystem.DocumentPath path, Class<A>? type, java.nio.file.LinkOption?... options);
    method public boolean removeDocument(java.net.URI documentUri, java.net.URI parentDocumentUri);
    method public java.net.URI? renameDocument(java.net.URI documentUri, String displayName);
  }

  public final class AndroidContentContractKt {
  }

}

