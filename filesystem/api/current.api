// Signature format: 4.0
package com.google.modernstorage.filesystem {

  public final class AndroidFileSystems {
    method public static java.nio.file.FileSystem getFileSystem(android.net.Uri uri);
    method public static java.nio.file.FileSystem getFileSystem(java.net.URI uri);
    method public static void initialize(android.content.Context context);
    method @kotlin.jvm.Throws(exceptionClasses=IllegalStateException::class) public static void installProvider(java.nio.file.spi.FileSystemProvider fileSystemProvider) throws java.lang.IllegalStateException;
    method public static java.nio.file.FileSystem newFileSystem(java.net.URI uri, java.util.Map<java.lang.String,java.lang.Object> env);
    field public static final com.google.modernstorage.filesystem.AndroidFileSystems INSTANCE;
  }

  public final class AndroidFileSystemsKt {
  }

  public final class AndroidPaths {
    method public static java.nio.file.Path get(android.net.Uri uri);
    method public static java.nio.file.Path get(java.net.URI uri);
    field public static final com.google.modernstorage.filesystem.AndroidPaths INSTANCE;
  }

  public class ContentFileSystem extends java.nio.file.FileSystem {
    method public void close();
    method public final String getAuthority();
    method public Iterable<java.nio.file.FileStore> getFileStores();
    method public com.google.modernstorage.filesystem.ContentPath getPath(java.net.URI uri);
    method public java.nio.file.Path getPath(String? first, java.lang.String?... more);
    method public java.nio.file.PathMatcher getPathMatcher(String? syntaxAndPattern);
    method public Iterable<java.nio.file.Path> getRootDirectories();
    method public String getSeparator();
    method public java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService();
    method public boolean isOpen();
    method public boolean isReadOnly();
    method public java.nio.file.WatchService newWatchService();
    method public com.google.modernstorage.filesystem.ContentFileSystemProvider provider();
    method public java.util.Set<java.lang.String> supportedFileAttributeViews();
    property public final String authority;
  }

  public final class ContentFileSystemProvider extends java.nio.file.spi.FileSystemProvider implements com.google.modernstorage.filesystem.PlatformContract {
    ctor public ContentFileSystemProvider(com.google.modernstorage.filesystem.PlatformContract contentContract);
    method public void checkAccess(java.nio.file.Path? path, java.nio.file.AccessMode?... modes);
    method public void copy(java.nio.file.Path? source, java.nio.file.Path? target, java.nio.file.CopyOption?... options);
    method public void createDirectory(java.nio.file.Path? dir, java.nio.file.attribute.FileAttribute<?>?... attrs);
    method public void delete(java.nio.file.Path? path);
    method public <V extends java.nio.file.attribute.FileAttributeView> V! getFileAttributeView(java.nio.file.Path? path, Class<V>? type, java.nio.file.LinkOption?... options);
    method public java.nio.file.FileStore getFileStore(java.nio.file.Path? path);
    method public java.nio.file.FileSystem getFileSystem(java.net.URI? uri);
    method public java.nio.file.Path getPath(java.net.URI? uri);
    method public String getScheme();
    method public boolean isHidden(java.nio.file.Path? path);
    method public boolean isSameFile(java.nio.file.Path? path, java.nio.file.Path? path2);
    method public void move(java.nio.file.Path? source, java.nio.file.Path? target, java.nio.file.CopyOption?... options);
    method public java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path? path, java.util.Set<? extends java.nio.file.OpenOption>? options, java.nio.file.attribute.FileAttribute<?>?... attrs);
    method public java.nio.file.DirectoryStream<java.nio.file.Path> newDirectoryStream(java.nio.file.Path? path, java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>? filter);
    method public java.nio.file.FileSystem newFileSystem(java.net.URI? uri, java.util.Map<java.lang.String,?>? env);
    method public <A extends java.nio.file.attribute.BasicFileAttributes> A! readAttributes(java.nio.file.Path? path, Class<A>? type, java.nio.file.LinkOption?... options);
    method public java.util.Map<java.lang.String,java.lang.Object> readAttributes(java.nio.file.Path? path, String? attributes, java.nio.file.LinkOption?... options);
    method public void setAttribute(java.nio.file.Path? path, String? attribute, Object? value, java.nio.file.LinkOption?... options);
    field public static final com.google.modernstorage.filesystem.ContentFileSystemProvider.Companion Companion;
  }

  public static final class ContentFileSystemProvider.Companion {
  }

  public final class ContentFileSystemProviderKt {
  }

  public class ContentPath implements java.nio.file.Path {
    ctor public ContentPath(com.google.modernstorage.filesystem.ContentFileSystem fs, java.net.URI uri);
    method public int compareTo(java.nio.file.Path? other);
    method protected java.util.List<java.lang.String> elements();
    method public boolean endsWith(java.nio.file.Path? other);
    method public boolean endsWith(String? other);
    method public java.nio.file.Path getFileName();
    method public com.google.modernstorage.filesystem.ContentFileSystem getFileSystem();
    method public java.nio.file.Path getName(int index);
    method public int getNameCount();
    method public java.nio.file.Path? getParent();
    method public java.nio.file.Path getRoot();
    method protected final java.net.URI getUri();
    method public boolean isAbsolute();
    method public java.util.Iterator<java.nio.file.Path> iterator();
    method public com.google.modernstorage.filesystem.ContentPath normalize();
    method public java.nio.file.WatchKey register(java.nio.file.WatchService? watcher, java.nio.file.WatchEvent.Kind<?>![]? events, java.nio.file.WatchEvent.Modifier?... modifiers);
    method public java.nio.file.WatchKey register(java.nio.file.WatchService? watcher, java.nio.file.WatchEvent.Kind<?>?... events);
    method public java.nio.file.Path relativize(java.nio.file.Path? other);
    method public java.nio.file.Path resolve(java.nio.file.Path? other);
    method public java.nio.file.Path resolve(String? other);
    method public java.nio.file.Path resolveSibling(java.nio.file.Path? other);
    method public java.nio.file.Path resolveSibling(String? other);
    method public boolean startsWith(java.nio.file.Path? other);
    method public boolean startsWith(String? other);
    method public java.nio.file.Path subpath(int beginIndex, int endIndex);
    method public java.nio.file.Path toAbsolutePath();
    method public java.io.File toFile();
    method public java.nio.file.Path toRealPath(java.nio.file.LinkOption?... options);
    method public java.net.URI toUri();
    property protected final java.net.URI uri;
  }

  public final class DocumentBasicAttributes implements java.nio.file.attribute.BasicFileAttributes {
    method public java.nio.file.attribute.FileTime creationTime();
    method public Void? fileKey();
    method public String getMimeType();
    method public boolean isDirectory();
    method public boolean isOther();
    method public boolean isRegularFile();
    method public boolean isSymbolicLink();
    method public java.nio.file.attribute.FileTime lastAccessTime();
    method public java.nio.file.attribute.FileTime lastModifiedTime();
    method public long size();
    property public final String mimeType;
  }

  public final class ExternalStorageFileSystem extends com.google.modernstorage.filesystem.ContentFileSystem {
    method public com.google.modernstorage.filesystem.ExternalStoragePath getPath(java.net.URI uri);
  }

  public final class ExternalStoragePath extends com.google.modernstorage.filesystem.ContentPath {
    method @kotlin.jvm.Throws(exceptionClasses={UnsupportedOperationException::class, SecurityException::class}) public java.io.File toFile() throws java.lang.SecurityException, java.lang.UnsupportedOperationException;
  }

  public final class ExternalStoragePathKt {
  }

  public interface PlatformContract {
    method public java.net.URI buildDocumentUri(String authority, String documentId, boolean buildTree);
    method public String? getDocumentId(java.net.URI documentUri);
    method public boolean isSupportedUri(java.net.URI uri);
    method public boolean isTreeUri(java.net.URI uri);
    method public java.nio.file.DirectoryStream<java.nio.file.Path> newDirectoryStream(com.google.modernstorage.filesystem.ContentPath path, java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>? filter);
    method public java.nio.channels.SeekableByteChannel openByteChannel(java.net.URI uri, String mode);
    method public java.net.URI prepareUri(java.net.URI incomingUri);
    method public <A extends java.nio.file.attribute.BasicFileAttributes> A! readAttributes(com.google.modernstorage.filesystem.ContentPath path, Class<A>? type, java.nio.file.LinkOption?... options);
  }

  public final class UriExtKt {
    method public static java.net.URI toURI(android.net.Uri);
    method public static android.net.Uri toUri(java.net.URI);
  }

}

package com.google.modernstorage.filesystem.internal {

  public final class AndroidContentContract implements com.google.modernstorage.filesystem.PlatformContract {
    ctor public AndroidContentContract(android.content.Context context);
    method public java.net.URI buildDocumentUri(String authority, String documentId, boolean buildTree);
    method public String? getDocumentId(java.net.URI documentUri);
    method public boolean isSupportedUri(java.net.URI uri);
    method public boolean isTreeUri(java.net.URI uri);
    method public java.nio.file.DirectoryStream<java.nio.file.Path> newDirectoryStream(com.google.modernstorage.filesystem.ContentPath path, java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>? filter);
    method public java.nio.channels.SeekableByteChannel openByteChannel(java.net.URI uri, String mode);
    method public java.net.URI prepareUri(java.net.URI incomingUri);
    method public <A extends java.nio.file.attribute.BasicFileAttributes> A! readAttributes(com.google.modernstorage.filesystem.ContentPath path, Class<A>? type, java.nio.file.LinkOption?... options);
  }

  public final class AndroidContentContractKt {
  }

}

